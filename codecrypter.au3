;============================================================================================
; Title ..........: CodeCrypter
; AutoIt Version..: 3.3.12
; Description ....: encrypts an Autoit script using any user-defined key or external password
; Author..........: A.R.T. Jonkers (RTFC)
; Release.........: 1.3
; Latest revision.: 16 Aug 2014
; License.........: free for personal use; free distribution allowed provided
;							the author is credited; all other rights reserved.
; Tested on.......: W7Pro/64
; Dependencies....: CodeScanner, readCSdatadump; see http://www.autoitscript.com/forum/topic/153368-code-scanner/
; Forum Link.....: http://www.autoitscript.com/forum/topic/155538-codecrypter-encrypt-your-script/
; Related to......: MCF.au3 + MCFinclude.au3 (MCF package), see www.autoitscript.com/forum/topic/155537-mcf-metacode-file-udf/)
;						  CodeScanner, see w5ww.autoitscript.com/forum/topic/153368-code-scanner/
; Acknowledgements:
; * Listview with Checkboxes, by Zedna, http://www.autoitscript.com/wiki/Snippets_%28_Checkboxes_%29
;============================================================================================
; Summary (Wotsit?)
;
; This GUI drives the MCF library to encrypt (not just obfuscate) an AutoIt
;	script, using MetaCode data generated by CodeScanner (also by RTFC)
;
; CodeCrypter (or rather, MCF.au3) also enables you to:
;	- produce a single portable script without includes or redundant parts
;	- translate the language of user-interface and other strings
;	- translate/rename any/all variable(s) or UDF(s) (requires some manual labour on your part)
;	- obfuscate variables, UDFs or both (automated)
;
; No guarantees, no warranties, no liability for damages, no refunds. Use at your own risk.
;
;============================================================================================
;	Application (WhyBother?)
;
; The encryption key is NOT stored inside your script, making static decompilation
;	without that key virtually impossible.
;
; Steps per script:
; 	1. #include MCFinclude.au3" in <your_script>
;	2. Run CodeScanner on <your_script> with setting WriteMetaCode=True
;	3. Run CodeCrypter on <your_script>
;
; The original source code is not changed; new files are created in a subdirectory.
;
; WARNING: do NOT include "MCF.au3" in your script.
;
; It works like this:
;	1. CodeScanner splits your target script into:
;			A) Structural Parts (files MCF#.txt; # = number)
;					these contain MetaCode tags
;			B) Content Arrays (saved as text files)
;					these describe what the MetaCode tags refer to (# = line = array index)
;	2. CodeCrypter then:
;			A) creates a single structure out of the parts (called MCF0.txt ("MCFzero"))
;			B) makes changes to that structure, if desired
;			C) replaces some/all content in some/all arrays, if desired
;			D) rebuilds the script using the (new) structure and (new) content arrays
;
; Note: CodeCrypter is just a front-end for the MCF UDF library.
;============================================================================================
;	Remarks (Just run it!)
;
; * If CodeCrypter fails on startup with the error _AES_Startup() function not found,
;		it is likely that AES.au3 was not found in the local directory, so
;		move it there, or edit the path in the #include directive in MCFinclude.au3
;
; * decide for yourself how to define the script's (global) encryption key(s), by
;		editing _MCFCC_Init() in MCFinclude.au3, before running CodeCrypter
;		Some examples of key definitions:
;		- user password query at startup
;		- system spec (e.g., harddrive serial number)
;		- environment variable (to be set by your installer (do NOT use EnvSet())
;		- (web or local) server response to query
;		- something clever you develop yourself
;		- a combination of the above (just concatenate the parts, or set $MCF_ENCRYPT_SHUFFLEKEY=True)
;
; * confused by the many settings? Use the one-click Presets!
;
; * UNSUPPORTED AUTOIT CONSTRUCTS:
;		- Assign, Eval, IsDeclared, Execute (self-modifying/-evaluating code) {depends, may work}
;		- object-type variables {depends, may work}
;		- Local/Dim $var1=_call(),$var2=_call(),... (multiple var declaration+definition by call on a single line)
;		- Indirection for variables that switch between use as single variant and array[]
;
; * UNSUPPORTED ENCRYPTION:
;		- UDF parameter default strings (Func _MyFunc($stringvar="defaultstring"))
;		- multiprocessing UDFs such as Picasso's CoProc that relaunch a script subsection (these would lack MCFinclude.au3)
;		- lines containing @error/@extended (Execute() loses their state prior to evaluation); such lines remain unencrypted
;
; * By default, encryption relies on Ward's AES.au3, which you have to download separately
;		and place in the same directory as MCFinclude.au3 and your target script.
;	IMPORTANT: AES.au3 requires one line to be patched to work with current AutoIt versions;
;		see the detailed instructions in the MCFinclude.au3 Remarks section.
;
; * _CreateSingleBuild() builds a single structure file (MCF0.txt) from your target
;		file plus all its #includes, regardless of whether CodeScanner deemed some
;		includes redundant.
;		MCF booleans determine how much material deemed redundant by CodeCrypter
;		(not CodeScanner) is to be omitted from the new structure.
;
; * use _BackTranslate() after running CodeScanner and _CreateSingleBuild()
;		to test whether the MetaCode (forward) translation step is valid.
;		Skip this check at your peril.
;
; * _CreateNewScript() should be used ONLY if you wish to replace MetaCode tags
;		entirely by yourself, based on content YOU changed in the *New[] arrays
;		(pre-filled with *Used[] arrays by _CreateSingleBuild()).
;		If you make no changes, the output is as when calling _BackTranslate().
;
; * Both Translation and Obfuscation fill selected array(s) *Transl[],
;		so these content replacements are mutually exclusive per selected array.
;		Note that variables and UDFs can be altered either way, but strings
;		can only be translated (obfuscated var/UDF names will still be	updated
;		inside strings if you leave their MCtags intact).
;		NB you'll have to update compiler directives containing variable names
;		yourself (e.g., #forceref)
;
; * Encryption requires Phrasing, but Phrasing can also be used on its own,
;		if you've found another use for it.
;
; * Encryption can replace all (or some) strings and phrases. Phrases are:
;		- conditionals (code following If/While/Until)
;		- calls (native AutoIt and UDFs)
;		- macros (all except @error/@extended; lines containing these remain unencrypted)
;		CodeCrypter always encrypts all three; if you wish to exclude specific types,
;		see the remarks in MCF.au3 for the appropriate settings with which to call
;		the MCF UDFs yourself.
;
; * if encryption fails, first try encrypting either strings or phrases alone.
;		Sometimes a single line or UDF is causing the problem. Just replace it with
;		the original line/UDF (remember to update obfuscated names in there if necessary).
;		See also the MCFencoding.log written out to CodeScanner's datadump subdirectory.
;
; * In games and media players, timing may be the issue. For example, trancexx's
;		elegant XMplayer will fail if too much extra decryption work is added.
;		In this case, you could encrypt only a small proportion of the code (<10%).
;
; * encryption implies extra processing at runtime, so expect slower execution;
;		you can adjust the proportion of encrypted code from 0-100% of calls and
;		conditionals, or encrypt only every N-th line (adjust var $subset_definition).
;
; * always consider whether you need to protect as much as possible (intellectual
;		property) or just enough so the code will fail without the decryption key.
;		Don't encrypt (= slow down) more than you have to.
;
; * code will be encrypted from the #include MCFinclude.au3 onwards,
;		so if #include MCFinclude.au3 precedes other #includes, these #includes will
;		be encrypted too, making the script more secure, but also slower in execution.
;
; * The number of encrypted lines can be further reduced by:
;		- enabling "Subset only", and defining a proportion (assigned randomly) or number of lines to skip (sequential)
;		- pressing button <UDFs> and disabling the encryption of individual UDFs you select
;	Note: this UDF "filter" is always applied (but by default all UDFs are selected);
;		the Subset checkbox below this button applies only to proportional reductions, not UDFs.
;
; * The variable $decryption_key can contain:
;		1. a real password the user has to supply when running the target, OR
;		2. whatever your key definition is supposed to return in the *intended* environment
;		(see the example further down)
;
; There are four scenarios:
; 1. key definition is empty, and $decryption_key is empty:
;		this won't work!
;
; 2. key definition is NOT empty, but $decryption_key IS empty:
;		- ENcryption key is defined by executing the key definition in the current environment
;		- DEcryption key is defined by the key definition in MCFinclude when running the target
;		This way the target will run only where/by whom it was encrypted.
;
; 3. key definition IS empty, but $decryption_key is NOT empty:
;		- ENcryption key is defined by $decryption_key
;		- DEcryption key is defined at target startup by either:
;			. parsed cmdline parameter (first one if more than one), OR
;			. user response to password query dialog
;		This way the target will run for whomever knows the decryption key.
;
; 4. key definition is NOT empty, and $decryption_key is NOT empty:
;		- ENcryption key is defined by $decryption_key
;		- DEcryption key is defined by the key definition in MCFinclude when running the target
;		This way the target will run only when executing the selected key definition at
;		target startup yields whatever you specified as $decryption_key during ENcryption.
;
;	Example: $CCkeytype = 3, and MCFinclude.au3 defines $CCkey[3] = @UserName macro
;		Scenario 2: target should work only for you
;			keep $decryption_key="" (do not supply a new key)
;			A) key definition called by CodeCrypter executes macro for ENcryption (@username = <your_username>)
;			B) key definition called by target executes macro for DEcryption = same as before ONLY when YOU run the target
;
;		Scenario 4: target should work NOT for you, but for user "Sally"
;			Press Encrypt-button "Decryptor" and set $decryption_key="Sally" (2x, to ensure no typos)
;			A) CodeCrypter's key definition for ENcryption = "Sally"
;			B) key definition called by target executes macro for DEcryption, so works only if macro @username yields "Sally"
;			The MCFinclude in the target defines $CCkey[3]=@UserName, so only when user
;			"Sally" runs the target, the correct decryption key is generated in $CCkey[3]
;
;	Note: scenario 4 does not work *directly* for multi-key shuffling.
;			There are two ways around this:
;			1. concatenate the response parts into a single keytype definition
;				(this solution cannot include a user password query), OR
;			2. after running CodeScanner on the target with the original MCFinclude,
;				edit MCFinclude.au3 for CodeCrypter to hardcode (as strings) the
;				expected response for each keytype definition within shuffle range,
;				then run CodeCrypter (this solution can include a user password query).
;
; ===============================================================================================================================
#Region ;**** Directives created by AutoIt3Wrapper_GUI ****
#AutoIt3Wrapper_Run_AU3Check=Y
#AutoIt3Wrapper_AU3Check_Parameters= -q -w 1 -w 2 -w- 4 -w 6 -w- 7
#AutoIt3Wrapper_UseX64=N
#AutoIt3Wrapper_res_Compatibility=Vista,Windows7
#AutoIt3Wrapper_UseUPX=Y
#AutoIt3Wrapper_Run_Obfuscator=N
#EndRegion ;**** Directives created by AutoIt3Wrapper_GUI ****

#include-once
#NoTrayIcon

#include <EditConstants.au3>
#include <GUIConstantsEx.au3>
#include <GUIListView.au3>
#include <Misc.au3>
#include <TabConstants.au3>
#include <WindowsConstants.au3>

; MetaCodeFile UDF library, includes MCFinclude.au3 or its alternative
#include "MCF.au3"

#region globals

; INI-related globals
Global $inifile=@ScriptDir & "\CodeCrypter.ini"
Global $INIboolean[1][1]
Global $INIstring[1][1]
Global $INInumeric[1][1]

; operational globals
Global $label_undefined="[ undefined ]"
Global $targetfile=$label_undefined	; defined in GUI
Global $targetpath=$label_undefined	; defined in GUI
Global $decryption_key=""			; can be defined in GUI (scenario-dependent, see Remarks)
Global $maxkeytype=0					; actual range is defined in _ChekcMCFvars() and/or _TestCCKey()
Global $selected2LV[1]				; concordance table for UDF selection
Global $LV2selected[1]				; concordance table for UDF selection
Global $showtooltips		=True		; internal switch, not in GUI
Global $askConfirmation	=True		; internal switch, not in GUI
Global $showprogress		=True		; internal switch, not in GUI

#endregion globals

#region Main

_LoadINIvarlists()
_ReadIniFile()
_CheckMCFvars()
_CCGUI()				; main proc
_WriteIniFile()
Exit

#endregion Main

#region main UDFs

Func _CCGUI()

	$size=303
	Global $CCGUI=GUICreate("CodeCrypter",$size-2,$size)

	GUISetBkColor(0xE0FFFF)
	GUISetFont(9, 400)

	$tooltip="CodeCrypter Version 1.1," & @CR & _
	"Latest Revision: 25 July 2014," & @CR & _
	Chr(169) & " Copyright RTFC, 2013-14."
	$Label_cpr = GUICtrlCreateLabel(Chr(169), $size-8, $size-8, 10, 10)
	GUICtrlSetTip(-1,$tooltip)
	GUICtrlSetFont(-1,7)
	GUICtrlSetColor(-1,0x0000FF)

	$CBwidth=17
	$CBheight=25
	$labelheight=17
	$labelmargin=6
	$groupwidth=130
	$groupheight=110

	GUICtrlCreateTab(5, 5, $size-10, $size-12,BitOR($TCS_HOTTRACK,$TCS_MULTILINE,$TCS_FIXEDWIDTH))

	$tab_MS=GUICtrlCreateTabItem("Main")
	GUICtrlSetState(-1, $GUI_SHOW)

	; top left block
	$groupwidth=130
	$groupleft=15
	$grouptop=60
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=25

	GUICtrlCreateGroup("File I/O", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Combine all MetaCode Files into a Single-Build called MCF0.txt"
	$Checkbox_CS = GUICtrlCreateCheckbox("Checkbox_CS", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_CREATE_SINGLE=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$Label_CS = GUICtrlCreateLabel("Create MCF0", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 100, $labelheight)
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf


	$tooltip="Create a script from MCF0 using codeScanner's original output." & @CR & "Use this to check that the MetaCode output is valid."
	$Checkbox_BT = GUICtrlCreateCheckbox("Checkbox_BT", $groupCBleft, $grouptop+($groupCBspacing*2), $CBwidth, $CBheight)
	If $MCF_BACKTRANSLATE=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$Label_BT = GUICtrlCreateLabel("BackTranslate", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*2), 100, $labelheight)
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf


	; in this case it may make more sense to call MCF functions directly from your own script
	$tooltip="Create a script from MCF0 using *New[] arrays." & @CR & "Use this to define New content without CodeCrypter."
	$Checkbox_CN = GUICtrlCreateCheckbox("Checkbox_CN", $groupCBleft, $grouptop+($groupCBspacing*3), $CBwidth, $CBheight)
	If $MCF_CREATE_NEW=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$Label_CN = GUICtrlCreateLabel("Create New", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*3), 100, $labelheight)
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf


	$buttontop=255
	$buttonwidth=80
	$buttonheight=27
	$button_File=GUICtrlCreateButton("Source", $groupleft, $buttontop, $buttonwidth,$buttonheight)
	$tooltip="Load a new Target source File (auto-loads Codescanner data path too)"
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$button_Run=GUICtrlCreateButton("Run", 110, $buttontop, $buttonwidth,$buttonheight)
	$tooltip="Execute all enabled operations in the correct order"
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$button_Exit=GUICtrlCreateButton("Exit", 205, $buttontop, $buttonwidth,$buttonheight)
	$tooltip="Apoptosis"
		If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf


	; top right block
	$groupleft=155
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=25

	GUICtrlCreateGroup("CodeCrypter", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Replace original content with *Transl[] array contents"
	$Checkbox_TRANS = GUICtrlCreateCheckbox("Checkbox_TRANS", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_TRANSLATE=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$Label_TRANS = GUICtrlCreateLabel("Translate", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 250, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf


	$tooltip="Replace original names with obfuscated *Transl[] array contents"
	$Checkbox_OBFUSC = GUICtrlCreateCheckbox("Checkbox_OBFUSC", $groupCBleft, $grouptop+($groupCBspacing*2), $CBwidth, $CBheight)
	If $MCF_OBFUSCATE=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf

	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_OBFUSC = GUICtrlCreateLabel("Obfuscate", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*2), 250, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Replace original phrases and strings with *Encryp[] array contents" & @CR & "(implies performancy penalty)"
	$Checkbox_ENCRYP = GUICtrlCreateCheckbox("Checkbox_ENCRYP", $groupCBleft, $grouptop+($groupCBspacing*3), $CBwidth, $CBheight)
	If $MCF_ENCRYPT=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_ENCRYP = GUICtrlCreateLabel("Encrypt", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*3), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	; bottom wide block
	$groupwidth=285
	$groupleft=15
	$grouptop=185
	$boxwidth=190

	$tooltip="This source file has to be pre-processed with CodeScanner."
	$Label_file = GUICtrlCreateLabel("Target File:", $groupleft+10, $grouptop+3, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Edit_file = GUICtrlCreateEdit("Editfile", $groupwidth-$boxwidth, $grouptop, $boxwidth, 22, BitOR($ES_READONLY,$ES_MULTILINE+$ES_AUTOHSCROLL))
	GUICtrlSetData(-1, $targetfile)
	GUICtrlSetBkColor(-1, 0xFFFFFF)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$grouptop=215
	$boxwidth=220

	$tooltip="CodeScanner writes data files to this subdirectory."
	$Label_path = GUICtrlCreateLabel("Path:", $groupleft+10, $grouptop+3, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Edit_path = GUICtrlCreateEdit("EditPath", $groupwidth-$boxwidth, $grouptop, $boxwidth, 22, BitOR($ES_READONLY,$ES_MULTILINE+$ES_AUTOHSCROLL))
	GUICtrlSetData(-1, $targetpath)
	GUICtrlSetBkColor(-1, 0xFFFFFF)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	;____________________________________________________________________________
	$tab_CO=GUICtrlCreateTabItem("Content")

	; top left block
	$groupwidth=130
	$groupleft=15
	$grouptop=60
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=25

	GUICtrlCreateGroup("Translate", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Replace original text strings by contents of array $stringsTransl"
	$Checkbox_TS = GUICtrlCreateCheckbox("Checkbox_TS", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_TRANSLATE_STRINGS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_TS = GUICtrlCreateLabel("Strings", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Replace original function names by contents of array $functionsTransl"
	$Checkbox_TU = GUICtrlCreateCheckbox("Checkbox_TU", $groupCBleft, $grouptop+($groupCBspacing*2), $CBwidth, $CBheight)
	If $MCF_TRANSLATE_UDFS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_TU = GUICtrlCreateLabel("Functions", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*2), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Replace original variable names by contents of array $variablesTransl"
	$Checkbox_TV = GUICtrlCreateCheckbox("Checkbox_TV", $groupCBleft, $grouptop+($groupCBspacing*3), $CBwidth, $CBheight)
	If $MCF_TRANSLATE_VARS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_TV = GUICtrlCreateLabel("Variables", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*3), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	; top right block
	$groupleft=155
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=25

	GUICtrlCreateGroup("Obfuscate", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Replace function names with cryptic hexadecimal strings"
	$Checkbox_OU = GUICtrlCreateCheckbox("Checkbox_OU", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_OBFUSCATE_UDFS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_OU = GUICtrlCreateLabel("Functions", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Replace variable names with cryptic hexadecimal strings"
	$Checkbox_OV = GUICtrlCreateCheckbox("Checkbox_OV", $groupCBleft, $grouptop+($groupCBspacing*2), $CBwidth, $CBheight)
	If $MCF_OBFUSCATE_VARS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_OV = GUICtrlCreateLabel("Variables", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*2), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$groupwidth=270
	$helptxt="Translation comes in two flavours. You can A) translate all strings seen by users into a different language, "
	$helptxt&="and B) replace names inside your code. For A, dump stringsUsed.txt into a translator service "
	$helptxt&="and save result as stringsTransl.txt; for B, you'll probably have to edit manually. "
	$helptxt&="Obfuscation just makes your script harder to read for humans."
	GUICtrlCreateLabel($helptxt, 25, $grouptop+$groupheight+20, $groupwidth-10, $groupheight)
	GUICtrlSetFont(-1,8.5)

	;____________________________________________________________________________
	$tab_EN=GUICtrlCreateTabItem("Encrypt")

	; top left block
	$groupwidth=130
	$groupleft=15
	$grouptop=60
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=25

	GUICtrlCreateGroup("Encrypt Content", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Replace each {phrase} with ""Execute(Decrypt(<encrypted call or conditionals>))"""
	$Checkbox_EP = GUICtrlCreateCheckbox("Checkbox_EP", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_ENCRYPT_PHRASES=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_EP = GUICtrlCreateLabel("Phrases", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Replace each {string} with Decrypt(<encrypted string>)"
	$Checkbox_ES = GUICtrlCreateCheckbox("Checkbox_ES", $groupCBleft, $grouptop+($groupCBspacing*2), $CBwidth, $CBheight)
	If $MCF_ENCRYPT_STRINGS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_ES = GUICtrlCreateLabel("Strings", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*2), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Nested      = encrypt(encrypt(<call>,dynamickey),statickey)"&@CR&"UnNested = encrypt(<call>,dynamickey)" & @CR & "WARNING: nesting doubles call execution time)"
	$Checkbox_EN = GUICtrlCreateCheckbox("Checkbox_EN", $groupCBleft, $grouptop+($groupCBspacing*3), $CBwidth, $CBheight)
	If $MCF_ENCRYPT_NESTED=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_EN = GUICtrlCreateLabel("Nested Keys", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*3), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	; top right block
	$groupleft=155
	$groupCBleft=$groupleft+20
	$groupCBspacing=22

	GUICtrlCreateGroup("Single Key", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="index to array $CCkey[] in MCFinclude to identify which (single) key definition to use"
	$Label_Key = GUICtrlCreateLabel("Enter key ID:", $groupleft+30, $grouptop+$groupCBspacing, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Input_Key = GUICtrlCreateInput("EditKey", $groupleft+48, $labelmargin+$grouptop+($groupCBspacing*1.5), 30, 22, BitOR($ES_NUMBER,$ES_MULTILINE,$ES_RIGHT))
	GUICtrlSetData(-1, $CCkeytype)
	GUICtrlSetBkColor(-1, 0xFFFFFF)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$buttontop=135
	$buttonwidth=90
	$buttonheight=23
	$button_PWD=GUICtrlCreateButton("Decryptor", $groupleft+25, $buttontop, $buttonwidth,$buttonheight)
	$tooltip="Define a user password to query at startup, or " & @CR & "an expected decryption key in the user's environment"
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	; bottom left block
	$groupleft=15
	$grouptop=180
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=24

	GUICtrlCreateGroup("Subset Only", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Encrypt only a defined part of all phrases (calls and conditionals)" & @CR & "NB: does NOT affect selected UDFs above, this filter is always applied"
	$Checkbox_SSK = GUICtrlCreateCheckbox("Checkbox_SSK", $groupCBleft, $grouptop+50, $CBwidth, $CBheight)
	If $MCF_ENCRYPT_SUBSET=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_SSK = GUICtrlCreateLabel("Subset def", $grouplabeleft, $labelmargin+$grouptop+50, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="0 < entry < 1 = proportion encrypted (selected at random)" & @CR & "    entry > 1 = 1 in N encrypted (sequential cycling)"
	$Input_SSD = GUICtrlCreateInput("EditSubset", $groupleft+40, $labelmargin+$grouptop+($groupCBspacing*3), 60, 22, BitOR($ES_MULTILINE,$ES_RIGHT))
	GUICtrlSetData(-1, $subset_definition)
	GUICtrlSetBkColor(-1, 0xFFFFFF)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$buttontop=205
	$buttonwidth=90
	$buttonheight=23
	$button_UDFs=GUICtrlCreateButton("UDFs", $groupleft+20, $buttontop, $buttonwidth,$buttonheight)
	$tooltip="Select individual UDF definition code blocks to encrypt" & @CR & "NB Always applied; does not depend on checkbox enabled below"
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	; bottom right block
	$groupleft=155
	$grouptop=180
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=22

	GUICtrlCreateGroup("Multiple Keys", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Select keytypes at random from a pre-defined range" & @CR & "(single keytype ID is then ignored)"
	$Checkbox_SK = GUICtrlCreateCheckbox("Checkbox_SK", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_ENCRYPT_SHUFFLEKEY=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	Endif
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_SK = GUICtrlCreateLabel("Shuffle Keys", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="predefined range of keytypes" & @CR & "Valid Range: 1 to " & $maxkeytype & " inclusive"
	$Label_RF = GUICtrlCreateLabel("From:", $groupleft+20, $labelmargin+$grouptop+($groupCBspacing*2), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Input_RF = GUICtrlCreateInput("EditFrom", $groupleft+20, $labelmargin+$grouptop+($groupCBspacing*3), 30, 22, BitOR($ES_NUMBER,$ES_MULTILINE,$ES_RIGHT))
	GUICtrlSetData(-1, $CCkeyshuffle_start)
	GUICtrlSetBkColor(-1, 0xFFFFFF)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$Label_RT = GUICtrlCreateLabel("To:", $groupleft+80, $labelmargin+$grouptop+($groupCBspacing*2), 100, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Input_RT = GUICtrlCreateInput("EditTo", $groupleft+80, $labelmargin+$grouptop+($groupCBspacing*3), 30, 22, BitOR($ES_NUMBER,$ES_MULTILINE,$ES_RIGHT))
	GUICtrlSetData(-1, $CCkeyshuffle_end)
	GUICtrlSetBkColor(-1, 0xFFFFFF)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	;____________________________________________________________________________
	$tab_SB=GUICtrlCreateTabItem("Single-Build")

	; top wide block
	$groupwidth=270
	$groupleft=15
	$grouptop=60
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=33

	GUICtrlCreateGroup("Create Single-Build", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Do not copy redundant UDF definitions from MCF# into MCF0"
	$Checkbox_SUU = GUICtrlCreateCheckbox("Checkbox_SUU", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_SKIP_UNCALLED_UDFS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	Endif
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_SUU = GUICtrlCreateLabel("Skip redundant UDF definitions", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 250, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Remove redundant global and UDF definitions from MCF0" & @CR & "(multi-pass post-processing; may take a long time)"
	$Checkbox_RO = GUICtrlCreateCheckbox("Checkbox_RO", $groupCBleft, $grouptop+($groupCBspacing*2), $CBwidth, $CBheight)
	If $MCF_REMOVE_ORPHANS=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_RO = GUICtrlCreateLabel("Remove Orphaned Globals and UDFs", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*2), 250, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$helptxt="First run CodeScanner (set WriteMetaCode = True) on your target (first add include MCFinclude.au3!). "
	$helptxt&="Under Tab [Single-Build] you control how much content is discarded when creating a Single-Build. "
	$helptxt&="CodeScanner and CodeCrypter both assess which parts are redundant, but they can be wrong."
	GUICtrlCreateLabel($helptxt, 25, $grouptop+$groupheight+20, $groupwidth-10, $groupheight)
	GUICtrlSetFont(-1,8.5)

	;____________________________________________________________________________
	$tab_ST=GUICtrlCreateTabItem("Structure")

	; top wide block
	$groupwidth=270
	$groupleft=15
	$grouptop=60
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=33

	GUICtrlCreateGroup("Change Structure", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Replace direct variable assignments with indirect calls"
	$Checkbox_IND = GUICtrlCreateCheckbox("Checkbox_IND", $groupCBleft, $grouptop+$groupCBspacing, $CBwidth, $CBheight)
	If $MCF_INDIRECTION=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_IND = GUICtrlCreateLabel("Enable Indirection (adds calls)", $grouplabeleft, $labelmargin+$grouptop+$groupCBspacing, 250, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Replace conditionals and calls by MetaCode phrases"
	$Checkbox_PHR = GUICtrlCreateCheckbox("Checkbox_PHR", $groupCBleft, $grouptop+($groupCBspacing*2), $CBwidth, $CBheight)
	If $MCF_PHRASING=True Then
		GUICtrlSetstate(-1,$GUI_CHECKED)
	Else
		GUICtrlSetstate(-1,$GUI_UNCHECKED)
	EndIf
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$Label_PHR = GUICtrlCreateLabel("Enable Phrasing (compounds calls)", $grouplabeleft, $labelmargin+$grouptop+($groupCBspacing*2), 250, $labelheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$helptxt="Indirection replaces code like ""$a = X"" (X = var or number) "
	$helptxt&="with a call to a UDF in MCFinclude. Reason: direct assignments "
	$helptxt&="cannot be encrypted, but calls can, so more code is shielded." & @CR
	$helptxt&="Phrasing extracts all (nested) calls, macros, and conditional statements. "
	$helptxt&="Compare the contents of arrays $phrases and $phrasesUsed to learn more."
	GUICtrlCreateLabel($helptxt, 25, $grouptop+$groupheight+20, $groupwidth-10, $groupheight)
	GUICtrlSetFont(-1,8.5)

	;____________________________________________________________________________
	$tab_PR=GUICtrlCreateTabItem("Presets")

	; top left block
	$groupheight=175
	$groupwidth=130
	$groupleft=15
	$grouptop=60
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40
	$groupCBspacing=33
	$buttonwidth=110
	$buttonheight=27

	GUICtrlCreateGroup("Simple Presets", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Reset all switches"
	$buttontop=$grouptop+($groupCBspacing*1)
	$button_blank=GUICtrlCreateButton("Clear All", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Use the contents of arrays *Transl[] to rebuild the script"
	$buttontop=$grouptop+($groupCBspacing*2)
	$button_trans=GUICtrlCreateButton("Translate", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Make all variable- and UDF names meaningless and hard to distinguish"
	$buttontop=$grouptop+($groupCBspacing*3)
	$button_obfusc=GUICtrlCreateButton("Obfuscate", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Use the contents of *New[] arrays without any intermediate processing"
	$buttontop=$grouptop+($groupCBspacing*4)
	$button_new=GUICtrlCreateButton("New Output", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	; top right block
	$groupleft=155
	$groupCBleft=$groupleft+20
	$grouplabeleft=$groupleft+40

	GUICtrlCreateGroup("Encryption Presets", $groupleft, $grouptop, $groupwidth, $groupheight)
	GUICtrlSetBkColor(-1,0xE0FFFF)

	$tooltip="Encrypt 10% of calls (cycled), do nothing else."
	$buttontop=$grouptop+$groupCBspacing
	$button_light=GUICtrlCreateButton("Light", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Encrypt 50% of calls (at random), encrypt strings, and obfuscate."
	$buttontop=$grouptop+($groupCBspacing*2)
	$button_medium=GUICtrlCreateButton("Medium", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Encrypt and obfuscate everything, use nested keys, but no indirection."
	$buttontop=$grouptop+($groupCBspacing*3)
	$button_heavy=GUICtrlCreateButton("Heavy", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$tooltip="Are you serious? (code will become much slower)"
	$buttontop=$grouptop+($groupCBspacing*4)
	$button_insane=GUICtrlCreateButton("Insane", $groupleft+10, $buttontop, $buttonwidth,$buttonheight)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$grouptop=250
	$groupwidth=270
	$helptxt="Adjust all settings at once by pressing a single button; "
	$helptxt&="then select Tab [Main Settings] and press [Run]."
	GUICtrlCreateLabel($helptxt, 25, $grouptop, $groupwidth-10, $groupheight)
	GUICtrlSetFont(-1,8.5)

	GUICtrlCreateTabItem("")
	;____________________________________________________________________________

	$tab_MSdummy = GUICtrlCreateDummy()
	$tab_PRdummy = GUICtrlCreateDummy()
	$tab_STdummy = GUICtrlCreateDummy()
	$tab_COdummy = GUICtrlCreateDummy()
	$tab_SBdummy = GUICtrlCreateDummy()
	$tab_ENdummy = GUICtrlCreateDummy()
	$enterdummy  = GUICtrlCreateDummy()

	Local $aAccelerators[7][2] = [["{m}",$tab_MSdummy],["{p}",$tab_PRdummy],["{s}",$tab_STdummy],["{c}",$tab_COdummy],["{b}",$tab_SBdummy],["{e}",$tab_ENdummy],["{Enter}",$enterdummy]]
	GUISetAccelerators($aAccelerators)
	GUISetState()

	While True
		$msgarray = GUIGetMsg(1)
		If $msgarray[1]<>$CCGUI Then ContinueLoop		; skip child msgs
		$nMsg=$msgarray[0]

		Switch $nMsg
			; dummies
			Case $tab_MSdummy
				GUICtrlSetState($tab_MS,$GUI_SHOW)
			Case $tab_PRdummy
				GUICtrlSetState($tab_PR,$GUI_SHOW)
			Case $tab_STdummy
				GUICtrlSetState($tab_ST,$GUI_SHOW)
			Case $tab_COdummy
				GUICtrlSetState($tab_CO,$GUI_SHOW)
			Case $tab_SBdummy
				GUICtrlSetState($tab_SB,$GUI_SHOW)
			Case $tab_ENdummy
				GUICtrlSetState($tab_EN,$GUI_SHOW)
			Case $enterdummy
				$curCtrl=ControlGetFocus($CCGUI)
				If StringLeft($curCtrl,4)="Edit" Then
					ControlSend($CCGUI,"",$curCtrl,@TAB)
				Else
					ControlClick($CCGUI, "", ControlGetFocus($CCGUI))
				EndIf

			; buttons
			Case $GUI_EVENT_CLOSE,$button_Exit
				Exitloop

			Case $Button_File
				$oldtargetfile=$targetfile
				$oldtargetpath=$targetpath

				_FadeGUI($CCGUI)
				_GetTargetFile()		; updates globals targetfile and targetpath, if valid
				_UnFadeGUI($CCGUI)

				If $oldtargetfile<>$targetfile Or $oldtargetpath<>$targetpath Then
					ControlSetText($CCGUI,"",$edit_file,$targetfile,1)
					ControlSetText($CCGUI,"",$edit_path,$targetpath,1)
				EndIf

			Case $Button_Run
				_FadeGUI($CCGUI)
				_RunMCF()
				_UnFadeGUI($CCGUI)

			Case $Checkbox_CS,$Label_CS
				$MCF_CREATE_SINGLE = Not $MCF_CREATE_SINGLE
				If $MCF_CREATE_SINGLE=True Then
					GUICtrlSetstate($Checkbox_CS,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_CS,$GUI_UNCHECKED)
				EndIf
				If $MCF_CREATE_SINGLE=True Then
					$MCF_SKIP_UNCALLED_UDFS = True
					GUICtrlSetstate($Checkbox_SUU,$GUI_CHECKED)
					$MCF_REMOVE_ORPHANS = True
					GUICtrlSetstate($Checkbox_RO,$GUI_CHECKED)
				EndIf

			Case $Checkbox_BT,$Label_BT
				$MCF_BACKTRANSLATE = Not $MCF_BACKTRANSLATE
				If $MCF_BACKTRANSLATE=True Then
					GUICtrlSetstate($Checkbox_BT,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				EndIf
				If $MCF_BACKTRANSLATE=True Then
					$MCF_CREATE_NEW=False
					GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)
					$MCF_TRANSLATE=False
					GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
					$MCF_OBFUSCATE=False
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
					$MCF_ENCRYPT=False
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				Endif

			Case $Checkbox_CN,$Label_CN
				$MCF_CREATE_NEW = Not $MCF_CREATE_NEW
				If $MCF_CREATE_NEW=True Then
					GUICtrlSetstate($Checkbox_CN,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)
				EndIf
				If $MCF_CREATE_NEW=True Then
					$MCF_BACKTRANSLATE=False
					GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
					$MCF_TRANSLATE=False
					GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
					$MCF_OBFUSCATE=False
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
					$MCF_ENCRYPT=False
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_TRANS,$Label_TRANS
				$MCF_TRANSLATE = Not $MCF_TRANSLATE
				If $MCF_TRANSLATE=True Then
					GUICtrlSetstate($Checkbox_TRANS,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				EndIf
				If $MCF_TRANSLATE=True Then
					$MCF_BACKTRANSLATE=False
					GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
					$MCF_CREATE_NEW=False
					GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)
					$MCF_TRANSLATE_STRINGS = True
					GUICtrlSetstate($Checkbox_TS,$GUI_CHECKED)
					If $MCF_ENCRYPT=False Then $MCF_PHRASING=False
				Else
					$MCF_TRANSLATE_STRINGS=False
					GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
					$MCF_TRANSLATE_UDFS=False
					GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
					$MCF_TRANSLATE_VARS=False
					GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_OBFUSC,$Label_OBFUSC
				$MCF_OBFUSCATE = Not $MCF_OBFUSCATE
				If $MCF_OBFUSCATE=True Then
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
				EndIf
				If $MCF_OBFUSCATE=True Then
					$MCF_BACKTRANSLATE=False
					GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
					$MCF_CREATE_NEW=False
					GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)
					$MCF_OBFUSCATE_UDFS=True
					GUICtrlSetstate($Checkbox_OU,$GUI_CHECKED)
					$MCF_OBFUSCATE_VARS=True
					GUICtrlSetstate($Checkbox_OV,$GUI_CHECKED)
					If $MCF_ENCRYPT=False Then $MCF_PHRASING=False
				Else
					$MCF_OBFUSCATE_UDFS=False
					GUICtrlSetstate($Checkbox_OU,$GUI_UNCHECKED)
					$MCF_OBFUSCATE_VARS=False
					GUICtrlSetstate($Checkbox_OV,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_ENCRYP,$Label_ENCRYP
				$MCF_ENCRYPT = Not $MCF_ENCRYPT
				If $MCF_ENCRYPT=True Then
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				EndIf
				$MCF_PHRASING=$MCF_ENCRYPT
				If $MCF_PHRASING=True Then
					GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				Endif
				If $MCF_ENCRYPT=True Then
					$MCF_BACKTRANSLATE=False
					GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
					$MCF_CREATE_NEW=False
					GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)
					$MCF_ENCRYPT_PHRASES=True
					GUICtrlSetstate($Checkbox_EP,$GUI_CHECKED)
					$MCF_ENCRYPT_STRINGS=True
					GUICtrlSetstate($Checkbox_ES,$GUI_CHECKED)
				Else
					$MCF_ENCRYPT_STRINGS=False
					GUICtrlSetstate($Checkbox_ES,$GUI_UNCHECKED)
					$MCF_ENCRYPT_PHRASES=False
					GUICtrlSetstate($Checkbox_EP,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_TS,$Label_TS
				$MCF_TRANSLATE_STRINGS = Not $MCF_TRANSLATE_STRINGS
				If $MCF_TRANSLATE_STRINGS=True Then
					GUICtrlSetstate($Checkbox_TS,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
				EndIf
				$MCF_TRANSLATE=($MCF_TRANSLATE_UDFS Or $MCF_TRANSLATE_VARS Or $MCF_TRANSLATE_STRINGS)
				If $MCF_TRANSLATE=True Then
					GUICtrlSetstate($Checkbox_TRANS,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_TU,$Label_TU
				$MCF_TRANSLATE_UDFS = Not $MCF_TRANSLATE_UDFS
				If $MCF_TRANSLATE_UDFS=True Then
					GUICtrlSetstate($Checkbox_TU,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				EndIf
				$MCF_TRANSLATE=($MCF_TRANSLATE_UDFS Or $MCF_TRANSLATE_VARS Or $MCF_TRANSLATE_STRINGS)
				If $MCF_TRANSLATE=True Then
					GUICtrlSetstate($Checkbox_TRANS,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				EndIf
				If $MCF_TRANSLATE_UDFS=True Then
					$MCF_OBFUSCATE_UDFS=False
					GUICtrlSetstate($Checkbox_OU,$GUI_UNCHECKED)
					$MCF_OBFUSCATE=($MCF_OBFUSCATE_UDFS Or $MCF_OBFUSCATE_VARS)
					If $MCF_OBFUSCATE=True Then
						GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
					Else
						GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
					EndIf
				EndIf

			Case $Checkbox_TV,$Label_TV
				$MCF_TRANSLATE_VARS = Not $MCF_TRANSLATE_VARS
				If $MCF_TRANSLATE_VARS=True Then
					GUICtrlSetstate($Checkbox_TV,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				EndIf
				$MCF_TRANSLATE=($MCF_TRANSLATE_UDFS Or $MCF_TRANSLATE_VARS Or $MCF_TRANSLATE_STRINGS)
				If $MCF_TRANSLATE=True Then
					GUICtrlSetstate($Checkbox_TRANS,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				EndIf
				If $MCF_TRANSLATE_VARS=True Then
					$MCF_OBFUSCATE_VARS=False
					GUICtrlSetstate($Checkbox_OV,$GUI_UNCHECKED)
					$MCF_OBFUSCATE=($MCF_OBFUSCATE_UDFS Or $MCF_OBFUSCATE_VARS)
					If $MCF_OBFUSCATE=True Then
						GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
					Else
						GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
					EndIf
				EndIf

			Case $Checkbox_OU,$Label_OU
				$MCF_OBFUSCATE_UDFS = Not $MCF_OBFUSCATE_UDFS
				If $MCF_OBFUSCATE_UDFS=True Then
					GUICtrlSetstate($Checkbox_OU,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_OU,$GUI_UNCHECKED)
				EndIf
				$MCF_OBFUSCATE=($MCF_OBFUSCATE_UDFS Or $MCF_OBFUSCATE_VARS)
				If $MCF_OBFUSCATE=True Then
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
				EndIf
				If $MCF_OBFUSCATE_UDFS=True Then
					$MCF_TRANSLATE_UDFS=False
					GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
					$MCF_TRANSLATE=($MCF_TRANSLATE_UDFS Or $MCF_TRANSLATE_VARS Or $MCF_TRANSLATE_STRINGS)
					If $MCF_TRANSLATE=True Then
						GUICtrlSetstate($Checkbox_TRANS,$GUI_CHECKED)
					Else
						GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
					EndIf
				EndIf

			Case $Checkbox_OV,$Label_OV
				$MCF_OBFUSCATE_VARS = Not $MCF_OBFUSCATE_VARS
				If $MCF_OBFUSCATE_VARS=True Then
					GUICtrlSetstate($Checkbox_OV,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_OV,$GUI_UNCHECKED)
				EndIf
				$MCF_OBFUSCATE=($MCF_OBFUSCATE_UDFS Or $MCF_OBFUSCATE_VARS)
				If $MCF_OBFUSCATE=True Then
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
				EndIf
				If $MCF_OBFUSCATE_VARS=True Then
					$MCF_TRANSLATE_VARS=False
					GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
					$MCF_TRANSLATE=($MCF_TRANSLATE_UDFS Or $MCF_TRANSLATE_VARS Or $MCF_TRANSLATE_STRINGS)
					If $MCF_TRANSLATE=True Then
						GUICtrlSetstate($Checkbox_TRANS,$GUI_CHECKED)
					Else
						GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
					EndIf
				EndIf

			Case $Checkbox_EP,$Label_EP
				$MCF_ENCRYPT_PHRASES = Not $MCF_ENCRYPT_PHRASES
				If $MCF_ENCRYPT_PHRASES=True Then
					GUICtrlSetstate($Checkbox_EP,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_EP,$GUI_UNCHECKED)
				EndIf
				$MCF_ENCRYPT=($MCF_ENCRYPT_PHRASES Or $MCF_ENCRYPT_STRINGS)
				If $MCF_ENCRYPT=True Then
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				EndIf
				$MCF_PHRASING=($MCF_ENCRYPT Or $MCF_PHRASING)
				If $MCF_PHRASING=True Then
					GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_ES,$Label_ES
				$MCF_ENCRYPT_STRINGS = Not $MCF_ENCRYPT_STRINGS
				If $MCF_ENCRYPT_STRINGS=True Then
					GUICtrlSetstate($Checkbox_ES,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_ES,$GUI_UNCHECKED)
				EndIf
				$MCF_ENCRYPT=($MCF_ENCRYPT_PHRASES Or $MCF_ENCRYPT_STRINGS)
				If $MCF_ENCRYPT=True Then
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				EndIf
				$MCF_PHRASING=($MCF_ENCRYPT Or $MCF_PHRASING)
				If $MCF_PHRASING=True Then
					GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_EN,$Label_EN
				$MCF_ENCRYPT_NESTED = Not $MCF_ENCRYPT_NESTED
				If $MCF_ENCRYPT_NESTED=True Then
					GUICtrlSetstate($Checkbox_EN,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_EN,$GUI_UNCHECKED)
				EndIf

			Case $Input_Key
				_EnteredValue($CCkeytype,$Input_Key,1,$maxkeytype)

			Case $button_PWD
				_FadeGUI($CCGUI)
				_DefineKey()
				_UnFadeGUI($CCGUI)

			Case $button_UDFs
				_FadeGUI($CCGUI)
				_DefineUDFlist()
				_UnFadeGUI($CCGUI)

			Case $Checkbox_SSK,$Label_SSK
				$MCF_ENCRYPT_SUBSET = Not $MCF_ENCRYPT_SUBSET
				If $MCF_ENCRYPT_SUBSET=True Then
					GUICtrlSetstate($Checkbox_SSK,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_SSK,$GUI_UNCHECKED)
				EndIf

			Case $Input_SSD
				$entry=ControlGetText($CCGUI,"",$Input_SSD)
				$newentry=_HandleEnteredSubsetDef($entry)
				ControlSetText($CCGUI,"",$Input_SSD,$newentry,1)
				If $entry<>$newentry Then
					$subset_definition=$newentry
					$MCF_ENCRYPT_SUBSET = True
					GUICtrlSetstate($Checkbox_SSK,$GUI_CHECKED)
				EndIf

			Case $Checkbox_SK,$Label_SK
				$MCF_ENCRYPT_SHUFFLEKEY = Not $MCF_ENCRYPT_SHUFFLEKEY
				If $MCF_ENCRYPT_SHUFFLEKEY=True Then
					GUICtrlSetstate($Checkbox_SK,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_SK,$GUI_UNCHECKED)
				EndIf

			Case $Input_RF
				_EnteredValue($CCkeyshuffle_start,$Input_RF,1,$CCkeyshuffle_end)

			Case $Input_RT
				_EnteredValue($CCkeyshuffle_end,$Input_RT,$CCkeyshuffle_start,$maxkeytype)

			Case $Checkbox_SUU,$Label_SUU
				$MCF_SKIP_UNCALLED_UDFS = Not $MCF_SKIP_UNCALLED_UDFS
				If $MCF_SKIP_UNCALLED_UDFS=True Then
					GUICtrlSetstate($Checkbox_SUU,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_SUU,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_RO,$Label_RO
				$MCF_REMOVE_ORPHANS = Not $MCF_REMOVE_ORPHANS
				If $MCF_REMOVE_ORPHANS=True Then
					GUICtrlSetstate($Checkbox_RO,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_RO,$GUI_UNCHECKED)
				EndIf

			Case $Checkbox_IND,$Label_IND
				$MCF_INDIRECTION = Not $MCF_INDIRECTION
				If $MCF_INDIRECTION=True Then
					GUICtrlSetstate($Checkbox_IND,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				EndIf

			; automatically set by enabling encryption
			; separate option is for generating array $phrases[] for other purposes
			Case $Checkbox_PHR,$Label_PHR
				$MCF_PHRASING = Not $MCF_PHRASING
				If $MCF_PHRASING=True Then
					GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				Else
					GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				EndIf

				If $MCF_PHRASING=False Then
					$MCF_ENCRYPT=False
					GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				EndIf

			; presets start here
			Case $button_new	; blank processing
				; this is the only way to use arrays *New[] without CodeCrypter preprocessing
				; it assumes arrays *New[] contain something valid produced externally (use at own risk)
				; NB MCF:_ClearArrays(), called by CreateSingleBuild, pre-fills these arrays with *Used[]

				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_TRANSLATE=False
				GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_STRINGS=False
				GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_UDFS=False
				GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				$MCF_TRANSLATE_VARS=False
				GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				$MCF_OBFUSCATE=False
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_UDFS=False
				GUICtrlSetstate($Checkbox_OU,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_VARS=False
				GUICtrlSetstate($Checkbox_OV,$GUI_UNCHECKED)
				$MCF_ENCRYPT=False
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_PHRASES=False
				GUICtrlSetstate($Checkbox_EP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_STRINGS=False
				GUICtrlSetstate($Checkbox_ES,$GUI_UNCHECKED)
				$MCF_INDIRECTION=False
				GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				$MCF_PHRASING=False
				GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=True
				GUICtrlSetstate($Checkbox_CN,$GUI_CHECKED)

			Case $button_trans	; translation only
				$MCF_TRANSLATE=True
				GUICtrlSetstate($Checkbox_TRANS,$GUI_CHECKED)
				$MCF_TRANSLATE_STRINGS=True
				GUICtrlSetstate($Checkbox_TS,$GUI_CHECKED)
				$MCF_TRANSLATE_UDFS=True
				GUICtrlSetstate($Checkbox_TU,$GUI_CHECKED)
				$MCF_TRANSLATE_VARS=True
				GUICtrlSetstate($Checkbox_TV,$GUI_CHECKED)
				$MCF_OBFUSCATE=False
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_UDFS=False
				GUICtrlSetstate($Checkbox_OU,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_VARS=False
				GUICtrlSetstate($Checkbox_OV,$GUI_UNCHECKED)
				$MCF_ENCRYPT=False
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_PHRASES=False
				GUICtrlSetstate($Checkbox_EP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_STRINGS=False
				GUICtrlSetstate($Checkbox_ES,$GUI_UNCHECKED)
				$MCF_INDIRECTION=False
				GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				$MCF_PHRASING=False
				GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=False
				GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)

			Case $button_obfusc	; obfuscation only
				$MCF_TRANSLATE=False
				GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_UDFS=False
				GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				$MCF_TRANSLATE_VARS=False
				GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				$MCF_OBFUSCATE=True
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
				$MCF_OBFUSCATE_UDFS=True
				GUICtrlSetstate($Checkbox_OU,$GUI_CHECKED)
				$MCF_OBFUSCATE_VARS=True
				GUICtrlSetstate($Checkbox_OV,$GUI_CHECKED)
				$MCF_ENCRYPT=False
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_PHRASES=False
				GUICtrlSetstate($Checkbox_EP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_STRINGS=False
				GUICtrlSetstate($Checkbox_ES,$GUI_UNCHECKED)
				$MCF_INDIRECTION=False
				GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				$MCF_PHRASING=False
				GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=False
				GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)

			Case $button_blank
				$MCF_TRANSLATE=False
				GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_STRINGS=False
				GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_UDFS=False
				GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				$MCF_TRANSLATE_VARS=False
				GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				$MCF_OBFUSCATE=False
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_UDFS=False
				GUICtrlSetstate($Checkbox_OU,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_VARS=False
				GUICtrlSetstate($Checkbox_OV,$GUI_UNCHECKED)
				$MCF_INDIRECTION=False
				GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				$MCF_PHRASING=False
				GUICtrlSetstate($Checkbox_PHR,$GUI_UNCHECKED)
				$MCF_ENCRYPT=False
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_PHRASES=False
				GUICtrlSetstate($Checkbox_EP,$GUI_UNCHECKED)
				$MCF_ENCRYPT_STRINGS=False
				GUICtrlSetstate($Checkbox_ES,$GUI_UNCHECKED)
				$MCF_ENCRYPT_NESTED=False
				GUICtrlSetstate($Checkbox_EN,$GUI_UNCHECKED)
				$MCF_ENCRYPT_SUBSET=False
				GUICtrlSetstate($Checkbox_SSK,$GUI_UNCHECKED)
				$MCF_ENCRYPT_SHUFFLEKEY=False
				GUICtrlSetstate($Checkbox_SK,$GUI_UNCHECKED)
				$MCF_CREATE_SINGLE=False
				GUICtrlSetstate($Checkbox_CS,$GUI_UNCHECKED)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=False
				GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)
				$MCF_SKIP_UNCALLED_UDFS=False
				GUICtrlSetstate($Checkbox_SUU,$GUI_UNCHECKED)
				$MCF_REMOVE_ORPHANS=False
				GUICtrlSetstate($Checkbox_RO,$GUI_UNCHECKED)

			Case $button_light	; light encryption
				$MCF_TRANSLATE=False
				GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_STRINGS=False
				GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_UDFS=False
				GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				$MCF_TRANSLATE_VARS=False
				GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				$MCF_OBFUSCATE=False
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_UDFS=False
				GUICtrlSetstate($Checkbox_OU,$GUI_UNCHECKED)
				$MCF_OBFUSCATE_VARS=False
				GUICtrlSetstate($Checkbox_OV,$GUI_UNCHECKED)
				$MCF_INDIRECTION=False
				GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				$MCF_PHRASING=True
				GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				$MCF_ENCRYPT=True
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_CHECKED)
				$MCF_ENCRYPT_PHRASES=True
				GUICtrlSetstate($Checkbox_EP,$GUI_CHECKED)
				$MCF_ENCRYPT_STRINGS=True
				GUICtrlSetstate($Checkbox_ES,$GUI_CHECKED)
				$MCF_ENCRYPT_NESTED=False
				GUICtrlSetstate($Checkbox_EN,$GUI_UNCHECKED)
				$MCF_ENCRYPT_SUBSET=True
				GUICtrlSetstate($Checkbox_SK,$GUI_CHECKED)
				$MCF_ENCRYPT_SHUFFLEKEY=False
				GUICtrlSetstate($Checkbox_SK,$GUI_UNCHECKED)
				$subset_definition=10
				ControlSetText($CCGUI,"",$Input_SSD,$subset_definition)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=False
				GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)

			Case $button_medium	; medium encryption
				$MCF_TRANSLATE=False
				GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_STRINGS=False
				GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_UDFS=False
				GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				$MCF_TRANSLATE_VARS=False
				GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				$MCF_OBFUSCATE=True
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
				$MCF_OBFUSCATE_UDFS=True
				GUICtrlSetstate($Checkbox_OU,$GUI_CHECKED)
				$MCF_OBFUSCATE_VARS=True
				GUICtrlSetstate($Checkbox_OV,$GUI_CHECKED)
				$MCF_INDIRECTION=False
				GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				$MCF_PHRASING=True
				GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				$MCF_ENCRYPT=True
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_CHECKED)
				$MCF_ENCRYPT_PHRASES=True
				GUICtrlSetstate($Checkbox_EP,$GUI_CHECKED)
				$MCF_ENCRYPT_STRINGS=True
				GUICtrlSetstate($Checkbox_ES,$GUI_CHECKED)
				$MCF_ENCRYPT_NESTED=False
				GUICtrlSetstate($Checkbox_EN,$GUI_UNCHECKED)
				$MCF_ENCRYPT_SUBSET=True
				GUICtrlSetstate($Checkbox_SSK,$GUI_CHECKED)
				$MCF_ENCRYPT_SHUFFLEKEY=False
				GUICtrlSetstate($Checkbox_SK,$GUI_UNCHECKED)
				$subset_definition=0.5
				ControlSetText($CCGUI,"",$Input_SSD,$subset_definition)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=False
				GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)

			Case $button_heavy	; heavy-duty encryption
				$MCF_TRANSLATE=False
				GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_STRINGS=False
				GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_UDFS=False
				GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				$MCF_TRANSLATE_VARS=False
				GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				$MCF_OBFUSCATE=True
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
				$MCF_OBFUSCATE_UDFS=True
				GUICtrlSetstate($Checkbox_OU,$GUI_CHECKED)
				$MCF_OBFUSCATE_VARS=True
				GUICtrlSetstate($Checkbox_OV,$GUI_CHECKED)
				$MCF_ENCRYPT=True
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_CHECKED)
				$MCF_ENCRYPT_PHRASES=True
				GUICtrlSetstate($Checkbox_EP,$GUI_CHECKED)
				$MCF_ENCRYPT_STRINGS=True
				GUICtrlSetstate($Checkbox_ES,$GUI_CHECKED)
				$MCF_INDIRECTION=False
				GUICtrlSetstate($Checkbox_IND,$GUI_UNCHECKED)
				$MCF_PHRASING=True
				GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				$MCF_ENCRYPT_NESTED=True
				GUICtrlSetstate($Checkbox_EN,$GUI_CHECKED)
				$MCF_ENCRYPT_SUBSET=False
				GUICtrlSetstate($Checkbox_SSK,$GUI_UNCHECKED)
				$MCF_ENCRYPT_SHUFFLEKEY=False
				GUICtrlSetstate($Checkbox_SK,$GUI_UNCHECKED)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=False
				GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)

			Case $button_insane	; encryption
				$MCF_TRANSLATE=False
				GUICtrlSetstate($Checkbox_TRANS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_STRINGS=False
				GUICtrlSetstate($Checkbox_TS,$GUI_UNCHECKED)
				$MCF_TRANSLATE_UDFS=False
				GUICtrlSetstate($Checkbox_TU,$GUI_UNCHECKED)
				$MCF_TRANSLATE_VARS=False
				GUICtrlSetstate($Checkbox_TV,$GUI_UNCHECKED)
				$MCF_OBFUSCATE=True
				GUICtrlSetstate($Checkbox_OBFUSC,$GUI_CHECKED)
				$MCF_OBFUSCATE_UDFS=True
				GUICtrlSetstate($Checkbox_OU,$GUI_CHECKED)
				$MCF_OBFUSCATE_VARS=True
				GUICtrlSetstate($Checkbox_OV,$GUI_CHECKED)
				$MCF_INDIRECTION=True
				GUICtrlSetstate($Checkbox_IND,$GUI_CHECKED)
				$MCF_PHRASING=True
				GUICtrlSetstate($Checkbox_PHR,$GUI_CHECKED)
				$MCF_ENCRYPT=True
				GUICtrlSetstate($Checkbox_ENCRYP,$GUI_CHECKED)
				$MCF_ENCRYPT_PHRASES=True
				GUICtrlSetstate($Checkbox_EP,$GUI_CHECKED)
				$MCF_ENCRYPT_STRINGS=True
				GUICtrlSetstate($Checkbox_ES,$GUI_CHECKED)
				$MCF_ENCRYPT_NESTED=True
				GUICtrlSetstate($Checkbox_EN,$GUI_CHECKED)
				$MCF_ENCRYPT_SUBSET=False
				GUICtrlSetstate($Checkbox_SSK,$GUI_UNCHECKED)
				$MCF_ENCRYPT_SHUFFLEKEY=False
				GUICtrlSetstate($Checkbox_SK,$GUI_UNCHECKED)
				$MCF_BACKTRANSLATE=False
				GUICtrlSetstate($Checkbox_BT,$GUI_UNCHECKED)
				$MCF_CREATE_NEW=False
				GUICtrlSetstate($Checkbox_CN,$GUI_UNCHECKED)

		EndSwitch
	WEnd

EndFunc


Func _DefineUDFlist()

	; check arrays filled? reload if not
	If $targetfile=$label_undefined Or $targetpath=$label_undefined Or _
		$targetfile="" Or $targetpath="" Or Not FileExists($targetpath&".") Then
		MsgBox(262144+4096+16,"CodeCrypter: Unable to proceed","Target file is undefined or not found.")
		Return SetError(-1,0,False)
	Else	; target is defined	; prepare $SelectedUDF* arrays, fill CS_dumppath
		_FillSelectedUDFarrays($targetpath,False)
	EndIf

	; set up two-way referencing for LV < = > arrays
	$totalUDFs=UBound($selectedUDFname)	; base-0
	_LVconcordance($totalUDFs)

	$restoreEnabled=(FileExists($CS_dumppath & "selectedUDFname.txt") And _
						FileExists($CS_dumppath & "selectedUDFstatus.txt") And _
						FileExists($CS_dumppath & "selectedUDFfixed.txt"))

	$guiheight=500
	$hSelectUDFs = GUICreate("Encryptable Code Sections",350,$guiheight)
	GUISetBkColor(0xE0FFFF)

	$iListView = GUICtrlCreateListView("",5,5,340,$guiheight-40)
	$hListView = GUICtrlGetHandle($iListView)
	_GUICtrlListView_SetExtendedListViewStyle($hListView, BitOR($LVS_EX_FULLROWSELECT,$LVS_EX_CHECKBOXES))
	$tooltip="Define which UDFs will be affected by Encryption;"&@CR& _
	"selections are committed only when pressing <Store> or <Return>."&@CR& _
	"Press <Escape> to abandon this process without changing anything."
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$groupleft=7
	$buttontop=$guiheight-31
	$buttonwidth=60
	$buttonmargin=9
	$buttonheight=27

	$button_Clear=GUICtrlCreateButton("Clear",$groupleft,$buttontop,$buttonwidth,$buttonheight)
	$tooltip="Unselect all checkboxes (to <Select All> instead: first press <Clear>, then press <Flip>)"
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$button_Reverse=GUICtrlCreateButton("Flip",$groupleft+$buttonwidth+$buttonmargin,$buttontop,$buttonwidth,$buttonheight)
	$tooltip="Reverse the state of all checkboxes"
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$button_Store=GUICtrlCreateButton("Store",$groupleft+($buttonwidth+$buttonmargin)*2,$buttontop, $buttonwidth,$buttonheight)
	$tooltip="Write out current selections for future reference"
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$button_Restore=GUICtrlCreateButton("Restore",$groupleft+($buttonwidth+$buttonmargin)*3,$buttontop,$buttonwidth,$buttonheight)
	$tooltip="Load a previously-stored user-defined selection ensemble"
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	If $restoreEnabled=True then
		GUICtrlSetState(-1,$GUI_ENABLE)
	Else
		GUICtrlSetState(-1,$GUI_DISABLE)
	EndIf

	$button_Return=GUICtrlCreateButton("Return",$groupleft+($buttonwidth+$buttonmargin)*4,$buttontop,$buttonwidth,$buttonheight)
	$tooltip="Use current settings from now on"
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	; set up <Esc> hotkey to cancel
	$listviewexit=GUICtrlCreateDummy()
	Local $AccelKeysmenu[1][2]=[["{Esc}",$listviewexit]]
	GUISetAccelerators($AccelKeysmenu)
	GUISetState(@SW_SHOW,$hSelectUDFs)	; fire it up

	; visibly create UDF list
	_GUICtrlListView_InsertColumn($hListView, 0, "Check to Encrypt, UnCheck to Skip Encryption", 350)
	_GUICtrlListView_SetColumnWidth($hListView,0,$LVSCW_AUTOSIZE_USEHEADER)

	; assign status
	_GUICtrlListView_AddItem($hListView,$selectedUDFname[0])
	_GUICtrlListView_SetItemChecked($hListView,0,$selectedUDFstatus[0])
	For $rc=1 To UBound($selectedUDFname)-1
		If $selectedUDFfixed[$rc]=False Then _GUICtrlListView_AddItem($hListView,$selectedUDFname[$rc] & "()")
		_GUICtrlListView_SetItemChecked($hListView,$rc,$selectedUDFstatus[$rc])
	Next

	While True
		$msg= GUIGetMsg()
		Switch $msg
			Case $GUI_EVENT_CLOSE,$listviewexit	; abandon changes and return
				ExitLoop

			Case $button_Clear
				_GUICtrlListView_SetCheckedStates($hListView,0)

			Case $button_Reverse
				_GUICtrlListView_SetCheckedStates($hListView,2)

			Case $button_Store,$button_Return
				If $showprogress=True Then SplashTextOn("","Storing Selected UDFs..." ,300,40,-1,-1,1+32,"Verdana",10)
				$maxlisted=UBound($LV2selected)-1
				For $rc=0 To $maxlisted
					$fState=_GUICtrlListView_GetItemChecked($hListView,$rc)
					$index=$LV2selected[$rc]
					$selectedUDFstatus[$index]=$fState
				Next
				_FileWriteFromArray($CS_dumppath & "selectedUDFname.txt",$selectedUDFname)
				_FileWriteFromArray($CS_dumppath & "selectedUDFstatus.txt",$selectedUDFstatus)
				_FileWriteFromArray($CS_dumppath & "selectedUDFfixed.txt",$selectedUDFfixed)
				$restoreEnabled=True
				GUICtrlSetState($button_Restore,$GUI_ENABLE)
				SplashOff()
				If $msg=$button_Return Then ExitLoop

			Case $button_Restore
				If $showprogress=True Then SplashTextOn("","Restoring Selected UDFs..." ,300,40,-1,-1,1+32,"Verdana",10)
				_FileReadToArray1D($CS_dumppath & "selectedUDFstatus.txt",$selectedUDFstatus)
				If IsNumber($selectedUDFstatus[0]) Then _ArrayDelete($selectedUDFstatus,0)

				If $totalUDFs<>UBound($selectedUDFstatus) Then
					MsgBox(262144+4096+16,"CodeCrypter: Restore failed","Unexpected number of listed UDFs in SelectedUDF* arrays." & @CR & "Original arrays will be restored.")
					_FillSelectedUDFarrays($CS_dumppath,True)	; force rebuild
					ExitLoop
				EndIf

				For $rc=0 To $totalUDFs-1
					$selectedUDFstatus[$rc]=($selectedUDFstatus[$rc]="True")	; convert back to boolean
					$index=$selected2LV[$rc]
					If $index>-1 Then	_GUICtrlListView_SetItemChecked($hListView,$index,$selectedUDFstatus[$rc]="True")
				Next
				SplashOff()
		EndSwitch
	WEnd
	GUIDelete($hSelectUDFs)

	Return True
EndFunc

#endregion main UDFs

#region auxiliary UDFs

Func _VarError($msg)
	MsgBox(262144+4096+16,"CodeCrypter: Unable to proceed",$msg)
	Exit
EndFunc


Func _FadeGUI($hGUI)

	WinSetTrans($hGUI,"",160)
	GUISetState(@SW_DISABLE,$hGUI)

EndFunc


Func _UnFadeGUI($hGUI)

	GUISetState(@SW_ENABLE,$hGUI)
	GUISetState(@SW_SHOW,$hGUI)
	WinSetTrans($hGUI,"",255)
	WinActivate($hGUI)

EndFunc


Func _CheckKeyEntries($GUI,$entry1,$entry2)

	$content1=ControlGetText($GUI,"",$entry1)
	$content2=ControlGetText($GUI,"",$entry2)

	If $content1=$content2  Then
		If $content1<>"" Then $decryption_key=$content1
		Return True
	Else
		$msg="The two typed entries are not identical."
		MsgBox(262144+4096+48,"CodeCrypter: Entry Error",$msg)
		Return False
	EndIf

EndFunc


Func _ReadIniFile()

	$section="Boolean"
	Global $INIvars = IniReadSection($inifile, $section)
	If Not @error Then
		For $rc=1 To $INIvars[0][0]
			If $INIvars[$rc][1]="True" Or $INIvars[$rc][1]="False" Then
				If IsDeclared($INIvars[$rc][0]) Then Assign($INIvars[$rc][0],($INIvars[$rc][1]="True"),4)
			EndIf
		Next
	EndIf

	$section="String"
	$stringvars = IniReadSection($inifile, $section)
	If Not @error Then
		For $rc=1 To $stringvars[0][0]
			If IsDeclared($stringvars[$rc][0]) Then Assign($stringvars[$rc][0],$stringvars[$rc][1],4)
		Next
	EndIf

	$section="Numeric"
	$numericvars = IniReadSection($inifile, $section)
	If Not @error Then
		For $rc=1 To $numericvars[0][0]
			If IsDeclared($numericvars[$rc][0]) Then Assign($numericvars[$rc][0],$numericvars[$rc][1],4)
		Next
	EndIf

	_WriteIniFile()

EndFunc


Func _WriteIniFile()

	_LoadINIvarlists()

	$section="Boolean"
	IniWriteSection($inifile,$section,$INIboolean)

	$section="String"
	IniWriteSection($inifile,$section,$INIstring)

	$section="Numeric"
	IniWriteSection($inifile,$section,$INInumeric)

EndFunc


Func _CheckMCFVars()

	If IsDeclared("MCFinclude")<>1 Then _VarError("Required global variable $"& $MCFinclude & " in the MCFinclude file is not declared")

	Local $requiredvars[8]		; these vars are not stored in INI, but need to be declared globally
	$requiredvars[01]="MCF_REPLACE_AUFUNCS"
	$requiredvars[02]="MCF_REPLACE_UDFS"
	$requiredvars[03]="MCF_REPLACE_VARS"
	$requiredvars[04]="MCF_REPLACE_STRINGS"
	$requiredvars[05]="MCF_REPLACE_MACROS"
	$requiredvars[06]="MCF_REPLACE_PHRASES"
	$requiredvars[07]="MCF_WRITE_COMMENTS"
	$requiredvars[07]="decryption_key"		; intentionally not stored in INI
	$requiredvars[1]="CCkey"					; intentionally not stored in INI
	$requiredvars[0]=UBound($requiredvars)-1

	For $rc=1 To $requiredvars[0]
		If IsDeclared($requiredvars[$rc])<>1 Then _VarError("Required global variable $"& $requiredvars[$rc] & " in MCFinclude file ("&$MCFinclude&") is not declared.")
	Next

	For $rc=1 To $INIboolean[0][0]
		If IsDeclared($INIboolean[$rc][0])<>1 Then _VarError("Required global variable $"& $requiredvars[$rc] & " in MCFinclude file ("&$MCFinclude&") is not declared.")
	Next

	For $rc=1 To $INInumeric[0][0]
		If IsDeclared($INInumeric[$rc][0])<>1 Then _VarError("Required global variable $"& $requiredvars[$rc] & " in MCFinclude file ("&$MCFinclude&") is not declared.")
	Next

	For $rc=1 To $INIstring[0][0]
		If IsDeclared($INInumeric[$rc][0])<>1 Then _VarError("Required global variable $"& $requiredvars[$rc] & " in MCFinclude file ("&$MCFinclude&") is not declared.")
	Next

	Global $maxkeytype=UBound($CCkey)-1
	If $maxkeytype<1 Then _VarError("Required global array $CCkey needs at least two defined entries (at indices 0 and 1).")
	If $CCkey[0]="" Then _VarError("Required global array content $CCkey[0] cannot be empty.")
	If $CCkeytype<1 Or $CCkeytype>$maxkeytype Then $CCkeytype=$maxkeytype
	If $CCkeyshuffle_start<1 Then $CCkeyshuffle_start=1
	If $CCkeyshuffle_end>$maxkeytype Then $CCkeyshuffle_end=$maxkeytype
	If $subset_definition<0 Then $subset_definition=1

	; inconsistency checks
	If ($MCF_TRANSLATE Or $MCF_OBFUSCATE Or $MCF_ENCRYPT)=True Then
		$MCF_CREATE_NEW=False
	EndIf

	If $MCF_BACKTRANSLATE=True Then $MCF_CREATE_NEW=False

	If $MCF_CREATE_NEW=True Then
		$MCF_BACKTRANSLATE=False
		$MCF_TRANSLATE=False
		$MCF_OBFUSCATE=False
		$MCF_ENCRYPT=False
	EndIf

	If $MCF_TRANSLATE_UDFS=True Then $MCF_OBFUSCATE_UDFS=False
	If $MCF_TRANSLATE_VARS=True Then $MCF_OBFUSCATE_VARS=False

	If $MCF_ENCRYPT=True Then $MCF_PHRASING=True

	If Not FileExists($targetpath) Then
		$targetfile=$label_undefined
		$targetpath=$label_undefined
	EndIf

	; something went wrong with the filename
	If $targetfile=$label_undefined Or StringInStr($targetpath,$targetfile)=False Then
		$targetfile=StringLeft($targetpath,StringInStr($targetpath,".CS_data"))
		$targetfile=StringtrimLeft($targetfile,StringInStr($targetfile,"\",0,-1))
		If StringStripWS($targetfile,1+2)="" Then $targetfile=$label_undefined
	EndIf

	_WriteIniFile()

EndFunc


Func _LoadINIvarlists()

	Global $INIboolean[21][2]
	$INIboolean[01][0]="MCF_CREATE_SINGLE"
	$INIboolean[02][0]="MCF_BACKTRANSLATE"
	$INIboolean[03][0]="MCF_CREATE_NEW"
	$INIboolean[04][0]="MCF_INDIRECTION"
	$INIboolean[05][0]="MCF_PHRASING"
	$INIboolean[06][0]="MCF_TRANSLATE"
	$INIboolean[07][0]="MCF_TRANSLATE_STRINGS"
	$INIboolean[08][0]="MCF_TRANSLATE_UDFS"
	$INIboolean[09][0]="MCF_TRANSLATE_VARS"
	$INIboolean[10][0]="MCF_OBFUSCATE"
	$INIboolean[11][0]="MCF_OBFUSCATE_UDFS"
	$INIboolean[12][0]="MCF_OBFUSCATE_VARS"
	$INIboolean[13][0]="MCF_ENCRYPT"
	$INIboolean[14][0]="MCF_ENCRYPT_PHRASES"
	$INIboolean[15][0]="MCF_ENCRYPT_STRINGS"
	$INIboolean[16][0]="MCF_ENCRYPT_NESTED"
	$INIboolean[17][0]="MCF_ENCRYPT_SUBSET"
	$INIboolean[18][0]="MCF_ENCRYPT_SHUFFLEKEY"
	$INIboolean[19][0]="MCF_SKIP_UNCALLED_UDFS"
	$INIboolean[20][0]="MCF_REMOVE_ORPHANS"

	$INIboolean[01][1]=$MCF_CREATE_SINGLE
	$INIboolean[02][1]=$MCF_BACKTRANSLATE
	$INIboolean[03][1]=$MCF_CREATE_NEW
	$INIboolean[04][1]=$MCF_INDIRECTION
	$INIboolean[05][1]=$MCF_PHRASING
	$INIboolean[06][1]=$MCF_TRANSLATE
	$INIboolean[07][1]=$MCF_TRANSLATE_STRINGS
	$INIboolean[08][1]=$MCF_TRANSLATE_UDFS
	$INIboolean[09][1]=$MCF_TRANSLATE_VARS
	$INIboolean[10][1]=$MCF_OBFUSCATE
	$INIboolean[11][1]=$MCF_OBFUSCATE_UDFS
	$INIboolean[12][1]=$MCF_OBFUSCATE_VARS
	$INIboolean[13][1]=$MCF_ENCRYPT
	$INIboolean[14][1]=$MCF_ENCRYPT_PHRASES
	$INIboolean[15][1]=$MCF_ENCRYPT_STRINGS
	$INIboolean[16][1]=$MCF_ENCRYPT_NESTED
	$INIboolean[17][1]=$MCF_ENCRYPT_SUBSET
	$INIboolean[18][1]=$MCF_ENCRYPT_SHUFFLEKEY
	$INIboolean[19][1]=$MCF_SKIP_UNCALLED_UDFS
	$INIboolean[20][1]=$MCF_REMOVE_ORPHANS

	$INIboolean[0][0]=UBound($INIboolean)-1

	Global $INInumeric[5][2]
	$INInumeric[01][0]="CCkeytype"
	$INInumeric[02][0]="CCkeyshuffle_start"
	$INInumeric[03][0]="CCkeyshuffle_end"
	$INInumeric[04][0]="subset_definition"

	$INInumeric[01][1]=$CCkeytype
	$INInumeric[02][1]=$CCkeyshuffle_start
	$INInumeric[03][1]=$CCkeyshuffle_end
	$INInumeric[04][1]=$subset_definition

	$INInumeric[0][0]=UBound($INInumeric)-1

	Global $INIstring[3][2]
	$INIstring[01][0]="targetfile"
	$INIstring[02][0]="targetpath"

	$INIstring[01][1]=$targetfile
	$INIstring[02][1]=$targetpath

	$INIstring[0][0]=UBound($INIstring)-1

EndFunc


Func _DefineKey()

	If $CCkeytype<1 Or $CCkeytype>$maxkeytype Then Return

	$size=260
	$DefKey=GUICreate("Define key content", $size, $size-10)

	GUICtrlCreateLabel("Defined $keytype = " & $CCkeytype & ";  $CCkey[" & $CCkeytype & "] currently yields:", 10, 15, $size-10, 20)
	$keydefreturn=$CCkey[$CCkeytype]
	If $keydefreturn="" Then $keydefreturn="[nothing], password to be queried"
	$curdef = GUICtrlCreateInput($keydefreturn, 10, 30, $size-20, 20,bitor($ES_MULTILINE,$ES_READONLY,$WS_HSCROLL))
	GUICtrlSetBkColor(-1, 0xF5F5F5)
	GUICtrlSetColor(-1, 0x0000FF)
	GUICtrlSetFont(-1, 9, 600)

	GUICtrlCreateLabel("Current Expected Return in Target environment:", 10, 65, $size-10, 20)
	$expectedreturn=$decryption_key
	If $expectedreturn="" Then $expectedreturn=$keydefreturn
	$curentry = GUICtrlCreateInput($expectedreturn, 10, 80, $size-20, 20,bitor($ES_MULTILINE,$ES_READONLY,$WS_HSCROLL))
	GUICtrlSetBkColor(-1, 0xF5F5F5)
	GUICtrlSetColor(-1, 0x0000FF)
	GUICtrlSetFont(-1, 9, 600)

	$tooltip="Case-Sensitive"
	GUICtrlCreateLabel("Enter New Expected Return or Password:", 10, 115, $size-10, 20)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$newentry1 = GUICtrlCreateInput("", 10, 130, $size-20, 20,bitor($ES_MULTILINE,$WS_HSCROLL))
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	GUICtrlCreateLabel("Please confirm by re-typing:", 10, 165, $size-10, 20)
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf
	$newentry2 = GUICtrlCreateInput("", 10, 180, $size-20, 20,bitor($ES_MULTILINE,$WS_HSCROLL))
	If $showtooltips=True Then
		GUICtrlSetTip(-1,$tooltip)
	Else
		GUICtrlSetTip(-1,"")
	EndIf

	$buttontop=215
	$buttonwidth=80
	$buttonheight=27
	$button_cancel=GUICtrlCreateButton("Cancel", 10, $buttontop, $buttonwidth,$buttonheight)
	$button_okay=GUICtrlCreateButton("Ok", $size-$buttonwidth-10, $buttontop, $buttonwidth,$buttonheight)

	$enterpressed = GUICtrlCreateDummy()
	Local $aAccelerators[1][2] = [["{Enter}",$enterpressed]]
	GUISetAccelerators($aAccelerators)
	GUISetState()

	While True
		$msg = GUIGetMsg()
		Select
			Case $msg=$GUI_EVENT_CLOSE Or $msg=$button_cancel
				ExitLoop

			Case $msg=$button_okay
				If _CheckKeyEntries($DefKey,$newentry1,$newentry2)=True Then ExitLoop

			Case $msg=$enterpressed
				Switch ControlGetFocus($DefKey)
					Case "Edit3"
						ControlFocus($DefKey,"", $newentry2)
					Case "Edit4"
						ControlFocus($DefKey,"", $newentry1)
					Case "Button1"
						ExitLoop
					Case "Button2"
						If _CheckKeyEntries($DefKey,$newentry1,$newentry2)=True Then ExitLoop
				EndSwitch
		EndSelect
	WEnd
	GUIDelete($DefKey)

EndFunc


Func _RunMCF()

	If $targetpath="" Or $targetpath=$label_undefined Or FileExists($targetpath)=False Then
		$msg = "Target path empty or not found."
		MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
		Return SetError(-1,0,False)
	EndIf

	_CheckCSfilesPresent($targetpath)	; CSdata only

	; check encryption settings before doing anything
	If $MCF_ENCRYPT=True Then

		If _TestCCKey()=False Then Return SetError(-1,0,False)

		If $MCF_ENCRYPT_SHUFFLEKEY=False Then

			If $CCkeytype<1 Or $CCkeytype>$maxkeytype Then
				$msg = "Encryption with single encryption key enabled, but specified keytype is out of range (valid range: 1 to " & $maxkeytype & ")."
				MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
				Return SetError(-2,0,False)
			EndIf

			$keydef=$CCkey[$CCkeytype]

			;check the four scenarios
			Select
				Case $keydef="" And $decryption_key="" 			; scenario 1
					$msg = "Encryption with single encryption key enabled, but both the key definition (keytype ID: "&$CCkeytype&") and the decryption key are empty (nothing to encrypt with)."
					MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
					Return SetError(-3,0,False)

				Case $keydef<>"" And $decryption_key=""		; scenario 2
					If $askConfirmation=True Then
						$msg = "You have selected the following scenario:" & @CR & @CR
						$msg &="ENcryption is using the current environment's response;" & @CR
						$msg &="DEcryption is expecting the current environment's response." & @CR & @CR
						$msg &="So the encrypted target file will run ONLY under the current conditions." & @CR & @CR
						$msg &="Proceed?" & @CR
						If MsgBox(262144+4096+64+1,"CodeCrypter",$msg)=2 Then Return True
					EndIf

				Case $keydef="" And $decryption_key<>"" 		; scenario 3
					If $askConfirmation=True Then
						$msg = "You have selected the following scenario:" & @CR & @CR
						$msg &="ENcryption is using the decryption key you supplied ("&$decryption_key&");" & @CR
						$msg &="DEcryption is expecting a user response (first commandline parameter or answer to query dialog)." & @CR & @CR
						$msg &="So the encrypted target file will run ONLY if the user knows the password." & @CR & @CR
						$msg &="Proceed?" & @CR
						If MsgBox(262144+4096+64+1,"CodeCrypter",$msg)=2 Then Return True
					EndIf

				Case $keydef<>"" And $decryption_key<>"" 		; scenario 4
					If $askConfirmation=True Then
						$msg = "You have selected the following scenario:" & @CR & @CR
						$msg &="ENcryption is using the decryption key you supplied ("&$decryption_key&");" & @CR
						$msg &="DEcryption is expecting the target's future environment's response." & @CR & @CR
						$msg &="So the encrypted target file will run ONLY if the key you supplied exactly matches the expected response of $CCkey's $keytype definition number " & $CCkeytype & "." & @CR & @CR
						$msg &="Proceed?" & @CR
						If MsgBox(262144+4096+64+1,"CodeCrypter",$msg)=2 Then Return True
					EndIf
			EndSelect

			; load CCkey[keytype]
			_MCFCC_Init($CCkeytype,False)

		Else		; check multiple keys within specified range

			If $CCkeyshuffle_start<=0 Or $CCkeyshuffle_end<=0 Then
				$msg = "Encryption with multiple encryption keys enabled, but keytype range (from "& _
				$CCkeyshuffle_start&" to " & $CCkeyshuffle_end & ") is invalid."
				MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
				Return SetError(-4,0,False)
			EndIf

			If $CCkeyshuffle_start<1 Or $CCkeyshuffle_start>$CCkeyshuffle_end Then
				$msg = "Encryption with multiple encryption keys enabled, but keytype range's lower bound ("& _
				$CCkeyshuffle_start&") is invalid (valid range: 1 to " &  $CCkeyshuffle_end & ")."
				MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
				Return SetError(-5,0,False)
			EndIf

			If $CCkeyshuffle_end<$CCkeyshuffle_start Or $CCkeyshuffle_end>$maxkeytype Then
				$msg = "Encryption with multiple encryption keys enabled, but keytype range's lower bound ("& _
				$CCkeyshuffle_start&") is invalid (valid range: 1 to " &  $CCkeyshuffle_end & ")"
				MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
				Return SetError(-6,0,False)
			EndIf

			; load $CCkey[]
			_MCFCC_Init($CCkeyshuffle_start,False)

			$empty=0
			For $cc=$CCkeyshuffle_start To $CCkeyshuffle_end
				If $CCkey[$cc]="" Then $empty+=1
			Next

			If $empty>1 Then
				$msg = "Encryption with range of keys enabled, but multiple keys within the specified range remain undefined (maximum = 1)."
				MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
				Return SetError(-7,0,False)
			EndIf

			If $empty=1 And $decryption_key="" Then
				$msg = "Encryption with multiple encryption keys enabled, but one key within the specified range is undefined, and no expected decryption key is supplied."
				MsgBox(262144+4096+48,"CodeCrypter: Run Error",$msg)
				Return SetError(-8,0,False)
			EndIf
		EndIf
	Endif

	; check/delete existing MCF0.txt, call _CreateSingleBuild()
	If $MCF_CREATE_SINGLE=True Or FileExists($targetpath & "MCF0.txt")=False Then

		If FileExists($targetpath & "MCF0.txt") Then
			$msg = "A Single-Build (""MCF0.txt"") already exists and will be overwritten. Proceed?"
			If $askConfirmation=True Then
				If MsgBox(262144+4096+32+1,"CodeCrypter Alert",$msg)=2 Then Return True
			EndIf

			If FileDelete($targetpath & "MCF0.txt")=0 Then
				$msg = "Unable to delete existing Single-Build file:" & @CR & @CR & $targetpath & "MCF0.txt"
				MsgBox(262144+4096+16,"CodeCrypter: Unable to Proceed",$msg)
				Return SetError(-9,0,False)
			EndIf
		EndIf

		; generate new MCF0.txt
		If _CreateSingleBuild($targetpath,True)=False Then Return SetError(-10,0,False)

	Endif

	; always reload all arrays from file after _CreateSingleBuild()
	$force_refresh=True

	If $MCF_BACKTRANSLATE=True Then
		If _BackTranslate($targetpath,$force_refresh)<>0 Then Return SetError(-11,0,False)
		$force_refresh=False
	Endif

	; several new files should be present after _CreateSingleBuild (not needed for _BackTranslate())
	If _CheckCSBfilesPresent($targetpath)=False Then Return SetError(-12,0,False)

	; expected: contents of one or more arrays *New[], changed by user
	; Be careful not to add or remove even a single line from the array files, just
	; change existing lines, else references will shift, breaking your new script
	If $MCF_CREATE_NEW=True Then
		if _CreateNewScript($targetpath,$force_refresh)<>0 Then Return SetError(-13,0,False)
		$force_refresh=False
	Endif

	If ($MCF_TRANSLATE Or $MCF_OBFUSCATE Or $MCF_ENCRYPT)=True Then

		; check content enabled
		If $MCF_TRANSLATE=True Then
			If ($MCF_TRANSLATE_STRINGS Or $MCF_TRANSLATE_UDFS Or $MCF_TRANSLATE_VARS)=False Then
				MsgBox(262144+4096+48,"CodeCrypter Alert","Translation enabled, but no content selected.")
				Return True
			EndIf
		EndIf

		If $MCF_OBFUSCATE=True Then
			If ($MCF_OBFUSCATE_UDFS Or $MCF_OBFUSCATE_VARS)=False Then
				MsgBox(262144+4096+48,"CodeCrypter Alert","Obfuscation enabled, but no content selected.")
				Return True
			EndIf
		EndIf

		If $MCF_ENCRYPT=True Then
			If ($MCF_ENCRYPT_STRINGS Or $MCF_ENCRYPT_PHRASES)=False Then
				MsgBox(262144+4096+48,"CodeCrypter Alert","Encryption enabled, but no content selected.")
				Return True
			EndIf
		EndIf

		; main call
		if _RebuildScript($targetpath,$force_refresh)<>0 Then return SetError(-14,0,False)
		$force_refresh=False

	Endif

	_WriteIniFile()
	If $MCF_CREATE_SINGLE=True Or $force_refresh=False Then
		MsgBox(262144+4096+64,"CodeCrypter","Run completed.",2)
	Else
		MsgBox(262144+4096+48,"CodeCrypter Alert","No processing options enabled.")
	EndIf

	Return True
EndFunc


Func _EnteredValue(ByRef $storevar,$ctrl,$lowerbound,$upperbound)

	$entry=ControlGetText($CCGUI,"",$ctrl)
	$newentry=_HandleEnteredNumber($storevar,$entry,$lowerbound,$upperbound)
	ControlSetText($CCGUI,"",$ctrl,$newentry,1)
	$storevar=$newentry

EndFunc


Func _HandleEnteredNumber($originalvalue,$newvalue,$lowerbound="",$upperbound="")

	If $newvalue=$originalvalue Or $newvalue="" Then Return $originalvalue

	If $lowerbound<>"" And $newvalue<$lowerbound Then
		$msg="Entered value (" & $newvalue & ") is below lower bound of " & $lowerbound
		MsgBox(262144+4096+48,"CodeCrypter: Bounds Error",$msg)
		Return $originalvalue
	EndIf
	If $upperbound<>"" And $newvalue>$upperbound Then
		$msg="Entered value (" & $newvalue & ") is above upper bound of " & $upperbound
		MsgBox(262144+4096+48,"CodeCrypter: Bounds Error",$msg)
		Return $originalvalue
	EndIf

	Return $newvalue
EndFunc


Func _GetTargetFile()

	$filefullpath=FileOpenDialog("Please Select CodeCrypter Target File",".","AutoIt scripts (*.au3)",1+2)
	If @error Or $filefullpath="" Then Return False

	$filepath=StringLeft($filefullpath,StringInStr($filefullpath,"\",0,-1))
	$filename=StringTrimLeft($filefullpath,StringInStr($filefullpath,"\",0,-1))
	$CSpath=$filefullpath & ".CS_DATA\"

	$reminder = "Reminder:" & @CR & "If you wish to encrypt this target later, please ensure that MCFinclude.au3 is included in your code, before running CodeScanner on it. Otherwise you'll have to do all this again."

	If Not FileExists($CSpath & ".") Then
		$msg  ="CodeScanner data subdirectory not found:" & @CR & @CR & $CSpath  & @CR  & @CR
		$msg &= "Are you sure you ran Codescanner with setting ""WriteMetaCode=True"", on target file " & $filename & " before? CodeCrypter requires this to function."  & @CR  & @CR
		$msg &= $reminder

		MsgBox(262144+4096+48,"CodeCrypter: File Error",$msg)
		Return False
	EndIf

	; are all required CodeScanner output files present?
	If _CheckCSfilesPresent($CSpath)=False Then Return False

	; selection appears to be valid
	Global $targetpath=$CSpath
	Global $targetfile=$filename

	_WriteIniFile()

	Return True
EndFunc


Func _GUICtrlListView_SetCheckedStates(Const $hListView, Const $iType) ; By Zedna, Modified by guinness.
; adapted from AutoIt snippet by Zedna; see http://www.autoitscript.com/wiki/Snippets_%28_Checkboxes_%29

	; param bounds check
	If $iType<0 Or $iType>2 Then Return SetError(1, 0, False)
	$fState=$iType

	$iCount=_GUICtrlListView_GetItemCount($hListView)
	For $rc = 0 To $iCount-1
		If $iType = 2 Then $fState = Not _GUICtrlListView_GetItemChecked($hListView, $rc) ; Invert checked state with $iType 2.
		_GUICtrlListView_SetItemChecked($hListView,$rc,$fState)
		$index=$LV2selected[$rc]
	Next

	Return True
EndFunc


Func _LVconcordance($total)
; build a two-way concordance table between display and arrays

	Global $selected2LV[$total]
	Global $LV2selected[1]
	$marker=0
	$selected2LV[0]=$marker
	$LV2selected[0]=$marker
	For $rc=1 To UBound($selectedUDFfixed)-1
		If $selectedUDFfixed[$rc]=True Then
			$selected2LV[$rc]=-1
		Else
			$marker+=1
			$selected2LV[$rc]=$marker
			_ArrayAdd($LV2selected,$rc,0,Chr(0))
		EndIf
	Next

EndFunc

#endregion auxiliary UDFs